#!/usr/bin/env -S perl
use strict;

use FindBin;
use lib ("$FindBin::Bin/lib");

use main;
use Opts::Option;
use Opts::Find;
use Opts::Filter;
use Opts::Store;
use HelptextCommand;


package helptext::completer;
use Getopt::Long;

my $helpOpt;
my $comp_point;
my $comp_line;
my $tty;

sub extractFromDataSection { my $starttag = shift;
    my @data;
    require FindBin;
    my $file = $FindBin::RealBin.'/'.$FindBin::RealScript;
    my $me   = $FindBin::Script;
    $me =~ s/-/_/g;
    open my $script, '<'.$file or die "Could not open: $file\n";
    my $foundStartTag = 0;
    while (<$script>) {
        if(!$foundStartTag){
            $_ =~ /^\s*__${starttag}__\s*/ 
              && ($foundStartTag = 1);
            next;
        }
        $_ =~ /^\s*__[A-Z_]+__\s*/ && return \@data;
        $_ =~ s/\$\{uc\(FindBin::Script\)\}/uc($me)/eg;
        $_ =~ s/\$\{lc\(FindBin::Script\)\}/lc($me)/eg;
        $_ =~ s/\$\{FindBin::Script\}/$FindBin::Script/g;
        push(@data, $_);
    }
    return \@data;
}

sub usage { my $OUT = (shift || *STDOUT);
    print $OUT @{extractFromDataSection('USAGE')};
    shift && print $OUT @{extractFromDataSection('USAGE_LONG')};
}

sub printCompletion { my $shell = uc(shift);
    $shell =~ /^(?:bash|zsh)$/i 
        || ::error("Unknown shell '$shell'. Use 'bash' or 'zsh'.");
    print @{extractFromDataSection($shell.'_COMPLETION')};
}

sub find_options{
    my ($cliArgs, $command) = @_;

    my $fullCmd =  HelptextCommand::HelpCmdForSubcommand($command, $helpOpt, $cliArgs);

    $fullCmd->{cmd} ne $command && init ($fullCmd->{envns}, $command);
    ::debug1("Full cmd: $fullCmd->{cmd}");

    my $stream  =  HelptextCommand::Open($fullCmd->{cmd}, $helpOpt);
       $stream  || return;

    my $optstore = new Opts::Store;
    my ($opt, $linenum);
    while(<$stream>) {
        $optstore->tryToFixDescription($opt, \$_);
        $opt = Opts::Find::AnyOpt(\$_, $linenum); 
        $opt && $optstore->store($opt) && next;
        Opts::Find::EmptyLine(\$_);
        $linenum++
    }

    return ($optstore->allOpts(), $optstore->optCache(), $fullCmd)
}

sub redirect {
    my ($results, $fullCmd, $cliargs, $opt, $msg) = @_;
    ::debug1("Check redirect 01: ".  @$results);
    ::debug1("Check redirect 01: cmdctx: ".  ($fullCmd->{cmd}));
    ::debug1("Check redirect 01: envns : ".  ($fullCmd->{envns}));
    ::debug1("Check redirect 01: opt   : ".  ($opt ? $opt->{name} . ' ' . $opt->{args} . ' ' . $opt->{numArgs} . ' ' . $opt->{needsArgs} : 'none'));
    @$results && return $results;
    
    ::debug1("Check redirect 02: ".  @$results);
    my $redirectVar;
    if($opt) {
        ::debug1("Check redirect 02.1: $opt->{name} $opt->{needsArgs}");
        ! $opt->{needsArgs} && return $results;
        $redirectVar = $opt->{name};
    } else {
        ::debug1("Check redirect 02.2: $fullCmd->{envns}");
        $fullCmd->{subcmd} && @$cliargs - $fullCmd->{subcmd}->{pos} > 2  && return $results;
        $redirectVar = $fullCmd->{envns};
    }
    ::debug1("Check redirect: $msg: ". $redirectVar);
    my $redirect = main::redirectOptFromEnv($redirectVar => "", $fullCmd->{envns}, $cliargs->[0]);
    ::debug1("Check redirect: found: ". $redirect);
    $redirect && do {
        @$cliargs = grep { $_ ne '=' } @$cliargs;
        my @cmd = split(/\s+/, $fullCmd->{cmd});
        my $cnt = scalar(@cmd) + ($opt && $opt->{numArgs}) + 1;
        return [ map {new Opts::Option({name => $_})} 
                    grep { $_ } 
                    (
                        '<<HT_REDIRECT>>'
                        , $cnt
                        , $redirect
                        , @cmd
                        , !$opt && $fullCmd->{subcmd} && $cliargs->[$fullCmd->{subcmd}->{pos} + 1]
                        ,  $opt && $opt->{cliindex} 
                                && map { $cliargs->[$_] } ($opt->{cliindex}..@$cliargs)
                    )
               ];
    };
    return $results;
}

sub needs_args { my ($opt, $optIndex, $cliArgs, $currArg) = @_;
    my $prevArg = $cliArgs->[-2];
    ::debug2("check 0: $opt->{hasOptArgs} [$prevArg] [$currArg]");
    $opt->{hasOptArgs} && $prevArg ne '=' && ($currArg eq '' || $currArg =~ /^\\?-/)
        && return 0;
    ::debug2("check 1");
    ($currArg eq '' || $currArg eq '=') && do {
        ::debug2("check 2");
        $prevArg eq '='             && return $opt->{numArgs};
        ::debug2("check 3");
        $prevArg eq $opt->{name}    && return $opt->{numArgs};
    };
    ::debug2("check 4");
    my $missingArgs  = $opt->{numArgs} - (@$cliArgs-1-$optIndex);
    ::debug2("missing arg count: $missingArgs");
    return $missingArgs < 0 ? 0 : ++$missingArgs
}

sub list_matches {
    my $cliArgs = $_[0];
    my $prevArg = $cliArgs->[-2];
    my $currArg = quotemeta($cliArgs->[-1]);
    my $command = @$cliArgs[0];
    ::debug1 ("ARGV: [". join('] [', @$cliArgs).']');
    ::debug1 ("ARGV: CURARG: $currArg");

    # Previous arg is -- => don't return anything
    ($prevArg =~ /^(?:--|>+)$/ ) && do {
        ::debug ("PREV ARG STOPS COMPLETION: $prevArg\n");
        return {matches => [], allopts => []};
    };

    my ($allOpts, $optcache, $fullCmd)    = find_options $cliArgs, $command, $helpOpt;
    ::debug1("We found ".scalar(@$allOpts)." options.");
    my $filteredOpts = Opts::Filter::ProbableCandidates(\@$allOpts, $command);
    ::debug1("After filters: ".scalar(@$filteredOpts)." options remaining.");
    ::debug("Filtered opts: [".join('] [', map { $_->{name} } @$filteredOpts)."]");
    my ($opt, $i) = HelptextCommand::LastOption($cliArgs, 
        ($fullCmd->{subcmd} && $fullCmd->{subcmd}->{pos}), $filteredOpts);

    ::debug3("Check step 00: $opt $i");
    my $matches;
    if ($opt) {
        $opt->{cliindex} = $i;
        ::debug2("Last option: $opt->{name}");
        ($opt->{needsArgs} = needs_args($opt, $i, $cliArgs, $currArg)) && do {
            ::debug2 ("Last option: $opt->{name} needs args");
            $matches = redirect([], $fullCmd, $cliArgs, $opt, "OPT NEEDS ARGS")
        };        
    }

    !$matches && main::fromEnv(SHOW_ALL => 0, $fullCmd->{envns}, $command) && do {
        ::debug3("Check step 01: ".scalar(@$filteredOpts));
        ::debug3("SHOW ALL?".main::fromEnv(SHOW_ALL => 0, $fullCmd->{envns}, $command) );
        $matches = redirect([grep { $_->{name} =~ /^$currArg/ && $_ } @$filteredOpts], $fullCmd, $cliArgs, $opt, "SHOW ALL")
    };
    !$matches && !$currArg && do {
        ::debug3("Check step 02");
        $matches = redirect([grep { $_->{isCmd} && $_ } @$filteredOpts], $fullCmd, $cliArgs, $opt, "NO CUR ITEM")
    };

    !$matches && do {
        ::debug3("Check step 03");
        $matches = redirect([grep { $_->{name} =~ /^$currArg/ } @$filteredOpts], $fullCmd, $cliArgs, $opt, "NO MATCH")
    };

    return { matches => $matches, allopts => $filteredOpts, optcache => $optcache }
}

sub prepare_argv {
    my ($comp_point, $comp_line, $curword) = @_;
    ! $comp_point || ! $comp_line && do {
        ::debug1("No COMP_LINE/COMP_POINT data available. len(COMP_LINE)="
        .len($comp_line).", COMP_POINT=$comp_point");
        return;
    };

    # debug output
    my ($comp_line_disp, $comp_line_suffix);
    main::debug_enabled() && do {
        ::debug1("COMP_LINE original : ".$comp_line);
        my $point_vs_len     = $comp_point + 2 - length($comp_line);
           $comp_line_suffix = $point_vs_len < 0 ? '' : (' ' x $point_vs_len);
        ::debug1("COMP_LINE point-len: ".$point_vs_len);
    };

    my $debugout = sub { ! main::debug_enabled() && return;
        my $linespec = shift;
        my $caller   = (caller(1))[3];
        $comp_line_disp = $comp_line.$comp_line_suffix;
        substr($comp_line_disp, $comp_point+1, 0) = ']';
        substr($comp_line_disp, $comp_point  , 0) = '[';
        $linespec && 
            ::debug1("$caller: COMP_LINE $linespec: ".$comp_line);
        ::debug1("$caller: COMP_LINE w/ point : ".$comp_line_disp);
    };
    $debugout->();

    my $currchar = substr($comp_line, $comp_point, 1);
    my $curword_ = $$curword;
    ::debug2("Curword       : ".$$curword);
    my $cliPosWord;# = index($comp_line, $$curword.' ', $comp_point);
    my $lastPosWord = $cliPosWord;
    my $searchFrom = 0;
    while(($cliPosWord = index($comp_line, $$curword, $searchFrom)) > -1) {
        $lastPosWord == $cliPosWord && last;
        $lastPosWord = $cliPosWord;
        $searchFrom  = $cliPosWord + 1;
        $cliPosWord - $comp_point == 1 && do {
            $$curword = "";
            ::debug2("comp_point $comp_point directly before $curword_. Cutting it to '$$curword'.");
            last;
        };
        $comp_point >= $cliPosWord && $comp_point <= $cliPosWord + length($$curword) && do {
            $$curword = substr($$curword, 0, $comp_point-$cliPosWord);
            ::debug2("comp_point $comp_point within $curword_. Cutting it to $$curword.");
            last;
        };
    }
    
    # debug output
    $debugout->("prepared ");
    return $currchar, $lastPosWord;
}

sub prepare_output {my ($results, $comp_point, $comp_line, $curword, $curwordpos) = @_;
    my $result  = $results->{matches};
    ::debug2("------------   : -------------------------");
    ::debug2("Result == ".scalar(@$result));
    ! @$result && return { result => [] };
    if (@$result == 1) {
        ::debug("Result == 1");
        my $resval = $result->[0]->{name};
        my $nextargpos = index ($comp_line, ' ', $comp_point);
        my $maxpoint = ($nextargpos > 0 ? $nextargpos : length($comp_line));
        my $beforepoint_init = substr($comp_line, $curwordpos, $comp_point - $curwordpos);
        my $afterpoint  = substr($comp_line, $comp_point, $maxpoint - $comp_point);
        main::debug_enabled() && do {
            ::debug3("\$curword      : $curword");
            ::debug3("\$curwordpos   : $curwordpos");
            ::debug3("\$comp_point   : $comp_point");
            ::debug3("\$comp_line    : $comp_line");
            ::debug3("\$resval       : $resval");
            ::debug3("\$nextargpos   : $nextargpos");
            ::debug3("\$maxpoint     : $maxpoint");
            ::debug3("\$afterpoint   : $afterpoint");
            ::debug3("\$beforepoint  : $beforepoint_init");
        };

        if ($resval eq $curword) {
            ::debug("Current word is result: $resval == $curword");
            $afterpoint !~ /^\s*$/ && return { result => [] };
            return {result => [map{sprintf("%s\n",$_->{name})}@$result] };
        }

        my $beforelen = length($beforepoint_init);
        my ($curopt, $cutlen) = ({opt=>0}, 0);
        do {
            my $beforepoint = substr($comp_line, $curwordpos, $comp_point - $curwordpos - $cutlen);
            ::debug3("\$beforepoint  : $beforepoint $cutlen ".($beforelen));
            ::debug3("Before/After   : [$beforepoint.$afterpoint] ");
            $curopt = {
                opt => $results->{optcache}->{$beforepoint.$afterpoint},
                beforepoint => $beforepoint
            };
            ::debug("Condition: 1: [".!$curopt->{opt}."], 2:[".($cutlen < $beforelen)."]");
        } 
        while (!$curopt->{opt} && (++$cutlen < $beforelen));

        main::debug_enabled() && $curopt->{opt} && do {
            ::debug3("\$curopt  : $curopt->{opt}->{name}");
            ::debug3("\$beforepoint  : $curopt->{beforepoint}");
            ::debug3("Before/After: [$curopt->{beforepoint}$afterpoint] ");
            ::debug3("Cached Opt  : [".($curopt->{opt} && $curopt->{opt}->{name})."]");
        };

        my $suffix = $curopt->{opt} ? ' '.$curopt->{beforepoint} : ' ';
           $suffix = $afterpoint ? $suffix : '';
        my $ts;
        $curopt->{opt} && do {
            $resval  =~ /^$beforepoint_init(.*)/;
            my $newopt_rest = $1;
            ::debug3("--------------------------------------------------------");
            ::debug3("\$curopt->{name}          : $curopt->{opt}->{name}");
            ::debug3("\$newopt                  : $resval");
            ::debug3(" - contains beforepoint? : $curopt->{beforepoint}");
            ::debug3("\$curopt->{beforepoint}   : $curopt->{beforepoint}");
            ::debug3("\$beforepoint_init        : $beforepoint_init");
            ::debug3("\$newopt_rest             : $newopt_rest");
            ::debug3("\$curopt_rest             : $afterpoint");
            ::debug3("\$suffix                  : $suffix");
            my $ttyresult = $newopt_rest.' '.$suffix."\n".("\e[D" x length($suffix));
            return { result => [$ttyresult], ttyready => 1 };
        };
        ::debug2("Suffix  : [".($suffix)."]");

        return { result => [map{sprintf("%s$suffix%s\n",$_->{name}, $ts)}@$result] };
    } 
    ::debug2("Result > 1");
    my $show_more = 0;
    main::numberFromEnv(\$show_more, SHOW_MORE => 0);
    ::debug3("SHOW MORE: $show_more");
    if($result->[0] && $result->[0]->{name} eq '<<HT_REDIRECT>>') {
        ::debug2("Redirect: $result->[2]->{name}");
        return { result => [map{sprintf("%s\n",$_->{name})}@$result] };
    } elsif ($show_more) {
        return { result => [map{
            $_->{desc} =~ s/[\'\`]//g;
            sprintf("%-30s %-40s-- %-80s\n"
                    , $_->{name}, $_->{args}
                    , substr($_->{desc},0,$ENV{COLUMNS} ? ($ENV{COLUMNS}-80) : 80)
                        .($_->{desc} =~ /\.$/ ? '' : ' .').'..')
                    }@$result] };
    } else {
        return { result => [map{sprintf("%s\n",$_->{name})}@$result] };
    }
}

sub write_to_tty { my $tty = shift;
    require "sys/ioctl.ph";
    open my $TTY, ">$tty" or die "$!";  
    ioctl($TTY, &TIOCSTI, $_) for split "", join " ", @{$_[0]};
}

sub get_opts {
    GetOptions(
    'p|comp-point=i'     => \$comp_point,
    'l|comp-line=s'      => \$comp_line,
    't|tty=s'            => \$tty,
    'd|log-debug=s'      => \&::init_debug_log,
      'trace'            => \&::trace,
    's|completion=s'     => sub { printCompletion $_[1]; exit 0 },
    'h|help:s'           => sub { main::usage(*STDOUT, $_[1] eq 'all'); exit 0  },
    ) 
}

sub init { my ($appname, $mainapp) = (uc($_[0]), uc($_[1]));
    $helpOpt = main::fromEnv(HELPOPT => '--help', $appname, $mainapp);
    HelptextCommand::init($appname, $mainapp);
    Opts::Find::init     ($appname, $mainapp);
    Opts::Filter::init   ($appname, $mainapp);
}

sub main {
    ::register_usage(\&usage);
    
    get_opts || do { ::main::usage ; exit 1 } ;

    ::debug("Preparing ARGV: [".join('] [', @ARGV)."]");
    @ARGV < 3 && ::error("Missing mandatory arguments.");


    my $curCliPos = shift @ARGV;

    ::debug1("curCliPos: $curCliPos");
    init $ARGV[0];
    main::debug_enabled() &&
        map { ::debug($_.'='.$ENV{$_}) } sort { $a <=> $b } grep { $_=~/^HT_/ } (keys %ENV);

    my $curwordref = \$ARGV[$curCliPos];
    my $curword    =  $ARGV[$curCliPos];

    ::debug2("Preparing ARGV     : ".join(' ', @ARGV));
    my ($currchar, $curwordpos) = prepare_argv($comp_point, $comp_line, $curwordref);
    ::debug2("Prepared ARGV      : ".join(' ', @ARGV));

    my $results = list_matches([@ARGV[0..$curCliPos]]);
    my $result  = $results->{matches};

    ::debug3 ("RESULT: ". scalar(@$result), map{"RESULT: ITEM: $_->{name} [$_->{type}]"}@$result);
    my $output = prepare_output ($results, $comp_point, $comp_line, $curword, $curwordpos);
    ::debug1 ("Tty?: $tty, Output to tty? $output->{ttyready}");
    if ($output->{ttyready}) {
        write_to_tty $tty, $output->{result};
    } else {
        print @{$output->{result}};
    }
    ::debug_end();
    exit 0
}

$ENV{HT_COMPLETER_UNITTEST} || main();

1;

__END__
__USAGE__
Usage: ${FindBin::Script} [OPTIONS] ARGS...

 Arguments:
  -p|--comp-point POS
                set the current cursor position within the current line (see --comp-line).

  -l|--comp-line LINE
                set the current line.

  -t|--tty SHELL_TTY
                set the tty of the shell that is using ${FindBin::Script}

  -s|--completion (bash|zsh)    
                helper command for shell completion. Shell can be either 'bash' or 'zsh'.

  -d|--log-debug LOGFILE
                dump debug messages to the given logfile.

  -D|--trace 
                activates tracing (implies -d to be active).

  -h|--help [all]
                print this help text.

__USAGE_LONG__
 Global environment variables:
   HT_HELPOPT               Specify the option to be used in order to
                            obtain an app's help text. When set to ':man'
                            we fallback to manpages. 
                            (Default: --help)
   HT_USE_CACHE             Some app's are a bit sluggish. Therfore we
                            use a cache for the app's help texts. Set 
                            this to 0 to deactivate caching.
                            (Default: 1)
   HT_SHOW_MORE             To see also the arguments and descriptions for options
                            in the reply, set this variable to 1. Not in zsh.
                            (Default: 0)
   HT_SHOW_ALL              Only (sub-)commands are suggested in the reply
                            by default. To see options a user must provide
                            at least a '-'. To see also options without
                            using a '-' set this variable to 1.
                            (Default: 0)
   HT_PADDING_(MIN|MAX)     Adjust the number of blanks that are to be 
                            assumed to be found before an option's name.
                            See section "Opt Regex environment variables"
                            for more information.
                            (Default: MIN=1 MAX=10)
   HT_OPTARG_DIST_(MIN|MAX) Adjust the number of blanks that are to be 
                            assumed to be found before an option's first.
                            argument See section "Opt Regex environment 
                            variables" for more information.
                            (Default: MIN=1 MAX=1)
   HT_MAX_CMD_DIST          As the detection of commands is error prone 
                            when based on single lines only, we use a set
                            of different filters in order to discard probably
                            faulty detections. One of these filters uses the
                            line distance between possible commands. A command
                            that seems isolated is discarded. This variable
                            let's you adjust the maximal line distance 
                            between two commands.
                            (Default: 5)

 App specific environment variables:
   HT_APP_{appname}_HELPOPT
   HT_APP_{appname}[_{command}]+_HELPOPT
   HT_APP_{appname}_PADDING_MIN
   HT_APP_{appname}[_{command}]+_PADDING_MIN
   HT_APP_{appname}_PADDING_MAX
   HT_APP_{appname}[_{command}]+_PADDING_MAX
   HT_APP_{appname}_HELPOPT
   HT_APP_{appname}[_{command}]+_OPTARG_DIST_MIN
   HT_APP_{appname}_HELPOPT
   HT_APP_{appname}[_{command}]+_OPTARG_DIST_MAX

  Opt Regex environment variables:
                                                                   optional
    Default: \s{1,10}                                           (can appear on 
  HT_PADDING_(MIN|MAX)              optional                       next line)
    ┌────┴────┐                    ┌────┴───┐                   ┌──────┴──────┐
    ┌─────────┬──────────┬─────────┬──────────────────────────────────────────┐
    │ Padding │ Opt-Name │ ArgDist │ Optarg │ OptDelim │ Optarg │ Description │
    └─────────┴──────────┴─────────┴──────────────────────────────────────────┘
                         └────┬────┘        └─────────┬─────────┘
                           optional                (0...N)
                      (can also be '=')
                       Default: \s{1,5}
                   HT_OPTARG_DIST_(MIN|MAX)
              └────────────────────────┬────────────────────────┘
                                    (1...N)

__BASH_COMPLETION__
_${lc(FindBin::Script)}()
{
    local IFS=$'\n'
    COMPREPLY=( $(${FindBin::Script} -l "$COMP_LINE" -p $COMP_POINT -d /tmp/X -- $COMP_CWORD "${COMP_WORDS[@]}" 2>/dev/null ) )
    [ "${COMPREPLY[0]}" == "<<HT_REDIRECT>>" ] && {
        local CALL=${COMPREPLY[2]}
        COMP_CWORD=$((${COMPREPLY[1]}-1))
        COMPREPLY=("${COMPREPLY[@]:3}")
        COMP_WORDS=(${COMPREPLY[@]})
        COMPREPLY=($($CALL))
    }
}

_${lc(FindBin::Script)}_completion() {
    compgen -S ' ' -W "$(echo -e 'bash\nzsh')" -- "${COMP_WORDS[$COMP_CWORD]}"
}
export HT_REDIRECT_${uc(FindBin::Script)}__ANY__COMPLETION=_${lc(FindBin::Script)}_completion
export HT_REDIRECT_${uc(FindBin::Script)}__ANY__S=_${lc(FindBin::Script)}_completion
export HT_APP_${uc(FindBin::Script)}_NO_COMMANDS=1
export HT_APP_${uc(FindBin::Script)}_SHOW_ALL=1
export HT_APP_${uc(FindBin::Script)}_SHOW_MORE=1
complete -o default -o nosort -F _${lc(FindBin::Script)} ${FindBin::Script}

__ZSH_COMPLETION__
_helptext_completer () {
  local words cword 
  read -Ac words
  read -cn cword
  reply=( $(${FindBin::Script} -l "$BUFFER" -p $CURSOR -d /tmp/X -- $((cword-1))  "$words[@]" ) )
  if [ $#reply = 0 ] ; then
    reply=($words[$cword]*)
  elif [ "$reply[1]" = "<<HT_REDIRECT>>" ] ; then
      local CALL=$reply[3]
      cword=$((reply[2]))
      reply=(${reply:3})
      reply=($(words=($reply[@]) cword=$cword $CALL))
  fi
}

_${lc(FindBin::Script)}_completion() {
    echo -e "bash zsh"
}
export HT_REDIRECT_${uc(FindBin::Script)}__ANY__COMPLETION=_${lc(FindBin::Script)}_completion
export HT_REDIRECT_${uc(FindBin::Script)}__ANY__S=_${lc(FindBin::Script)}_completion
export HT_APP_${uc(FindBin::Script)}_NO_COMMANDS=1
export HT_APP_${uc(FindBin::Script)}_SHOW_ALL=1
compctl -K _${lc(FindBin::Script)} ${FindBin::Script}
